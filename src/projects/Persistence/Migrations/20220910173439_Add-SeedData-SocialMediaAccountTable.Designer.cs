// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220910173439_Add-SeedData-SocialMediaAccountTable")]
    partial class AddSeedDataSocialMediaAccountTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("Core.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Core.Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "OperationClaimId");

                    b.HasIndex("OperationClaimId");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.ProgrammingLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProgrammingLanguages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Java"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Go"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Python"
                        },
                        new
                        {
                            Id = 5,
                            Name = "JavaScript"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SocialMediaAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DeveloperId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.ToTable("SocialMediaAccounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeveloperId = 1,
                            Link = "www.github.com/Busulgan41",
                            Website = "Github"
                        },
                        new
                        {
                            Id = 2,
                            DeveloperId = 2,
                            Link = "www.github.com/Cagan.Cagiran",
                            Website = "Github"
                        },
                        new
                        {
                            Id = 3,
                            DeveloperId = 3,
                            Link = "www.github.com/Gelincik.Korol",
                            Website = "Github"
                        },
                        new
                        {
                            Id = 4,
                            DeveloperId = 4,
                            Link = "www.github.com/Artiinal90",
                            Website = "Github"
                        },
                        new
                        {
                            Id = 5,
                            DeveloperId = 5,
                            Link = "www.github.com/Abaka.Avan",
                            Website = "Github"
                        },
                        new
                        {
                            Id = 6,
                            DeveloperId = 6,
                            Link = "www.github.com/Askin.Yorulmaz",
                            Website = "Github"
                        },
                        new
                        {
                            Id = 7,
                            DeveloperId = 7,
                            Link = "www.github.com/Belgi66",
                            Website = "Github"
                        },
                        new
                        {
                            Id = 8,
                            DeveloperId = 8,
                            Link = "www.github.com/Butuk_Kaplangi",
                            Website = "Github"
                        },
                        new
                        {
                            Id = 9,
                            DeveloperId = 9,
                            Link = "www.github.com/Karaca61",
                            Website = "Github"
                        },
                        new
                        {
                            Id = 10,
                            DeveloperId = 10,
                            Link = "www.github.com/Bokde54",
                            Website = "Github"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgrammingLanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammingLanguageId");

                    b.ToTable("Technologies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Asp.Net",
                            ProgrammingLanguageId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Blazor",
                            ProgrammingLanguageId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = ".Net MAUI",
                            ProgrammingLanguageId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Spring",
                            ProgrammingLanguageId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "JSP",
                            ProgrammingLanguageId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "Gin",
                            ProgrammingLanguageId = 3
                        },
                        new
                        {
                            Id = 7,
                            Name = "Django",
                            ProgrammingLanguageId = 4
                        },
                        new
                        {
                            Id = 8,
                            Name = "Flask",
                            ProgrammingLanguageId = 4
                        },
                        new
                        {
                            Id = 9,
                            Name = "Angular",
                            ProgrammingLanguageId = 5
                        },
                        new
                        {
                            Id = 10,
                            Name = "Vue",
                            ProgrammingLanguageId = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.Developer", b =>
                {
                    b.HasBaseType("Core.Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Developer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Anise47@yahoo.com",
                            FirstName = "Anise",
                            LastName = "Aşıkoğlu",
                            PasswordHash = new byte[] { 191, 98, 181, 194, 230, 43, 0, 3, 200, 89, 210, 159, 105, 146, 247, 185, 165, 120, 244, 248, 194, 27, 104, 41, 152, 30, 62, 96, 180, 214, 203, 220, 203, 254, 155, 71, 170, 113, 41, 45, 42, 170, 32, 176, 20, 217, 48, 87, 237, 191, 59, 167, 202, 94, 139, 88, 52, 23, 126, 171, 236, 157, 243, 122, 148, 137, 206, 57, 229, 219, 149, 227, 45, 153, 236, 92, 160, 116, 26, 138, 205, 141, 194, 15, 145, 185, 231, 136, 102, 255, 4, 88, 247, 240, 116, 82, 36, 130, 16, 231, 2, 32, 109, 223, 28, 162, 180, 35, 173, 62, 121, 3, 153, 235, 231, 104, 173, 177, 160, 253, 121, 169, 125, 235, 32, 53, 176, 166 },
                            PasswordSalt = new byte[] { 197, 167, 146, 129, 161, 211, 255, 106, 175, 35, 38, 119, 217, 254, 240, 219, 93, 216, 17, 55, 245, 103, 158, 109, 102, 200, 28, 100, 109, 235, 160, 110, 51, 196, 4, 146, 141, 185, 98, 202, 23, 191, 157, 183, 170, 114, 32, 8, 32, 84, 112, 174, 217, 253, 154, 158, 231, 143, 102, 191, 228, 120, 85, 141 },
                            Status = false
                        },
                        new
                        {
                            Id = 2,
                            Email = "Ezrak25@hotmail.com",
                            FirstName = "Ezrak",
                            LastName = "Solmaz",
                            PasswordHash = new byte[] { 191, 98, 181, 194, 230, 43, 0, 3, 200, 89, 210, 159, 105, 146, 247, 185, 165, 120, 244, 248, 194, 27, 104, 41, 152, 30, 62, 96, 180, 214, 203, 220, 203, 254, 155, 71, 170, 113, 41, 45, 42, 170, 32, 176, 20, 217, 48, 87, 237, 191, 59, 167, 202, 94, 139, 88, 52, 23, 126, 171, 236, 157, 243, 122, 148, 137, 206, 57, 229, 219, 149, 227, 45, 153, 236, 92, 160, 116, 26, 138, 205, 141, 194, 15, 145, 185, 231, 136, 102, 255, 4, 88, 247, 240, 116, 82, 36, 130, 16, 231, 2, 32, 109, 223, 28, 162, 180, 35, 173, 62, 121, 3, 153, 235, 231, 104, 173, 177, 160, 253, 121, 169, 125, 235, 32, 53, 176, 166 },
                            PasswordSalt = new byte[] { 197, 167, 146, 129, 161, 211, 255, 106, 175, 35, 38, 119, 217, 254, 240, 219, 93, 216, 17, 55, 245, 103, 158, 109, 102, 200, 28, 100, 109, 235, 160, 110, 51, 196, 4, 146, 141, 185, 98, 202, 23, 191, 157, 183, 170, 114, 32, 8, 32, 84, 112, 174, 217, 253, 154, 158, 231, 143, 102, 191, 228, 120, 85, 141 },
                            Status = false
                        },
                        new
                        {
                            Id = 3,
                            Email = "Perver.Ozgorkey@gmail.com",
                            FirstName = "Perver",
                            LastName = "Özgörkey",
                            PasswordHash = new byte[] { 191, 98, 181, 194, 230, 43, 0, 3, 200, 89, 210, 159, 105, 146, 247, 185, 165, 120, 244, 248, 194, 27, 104, 41, 152, 30, 62, 96, 180, 214, 203, 220, 203, 254, 155, 71, 170, 113, 41, 45, 42, 170, 32, 176, 20, 217, 48, 87, 237, 191, 59, 167, 202, 94, 139, 88, 52, 23, 126, 171, 236, 157, 243, 122, 148, 137, 206, 57, 229, 219, 149, 227, 45, 153, 236, 92, 160, 116, 26, 138, 205, 141, 194, 15, 145, 185, 231, 136, 102, 255, 4, 88, 247, 240, 116, 82, 36, 130, 16, 231, 2, 32, 109, 223, 28, 162, 180, 35, 173, 62, 121, 3, 153, 235, 231, 104, 173, 177, 160, 253, 121, 169, 125, 235, 32, 53, 176, 166 },
                            PasswordSalt = new byte[] { 197, 167, 146, 129, 161, 211, 255, 106, 175, 35, 38, 119, 217, 254, 240, 219, 93, 216, 17, 55, 245, 103, 158, 109, 102, 200, 28, 100, 109, 235, 160, 110, 51, 196, 4, 146, 141, 185, 98, 202, 23, 191, 157, 183, 170, 114, 32, 8, 32, 84, 112, 174, 217, 253, 154, 158, 231, 143, 102, 191, 228, 120, 85, 141 },
                            Status = false
                        },
                        new
                        {
                            Id = 4,
                            Email = "Taskin.Sadiklar@yahoo.com",
                            FirstName = "Taşkın",
                            LastName = "Sadıklar",
                            PasswordHash = new byte[] { 191, 98, 181, 194, 230, 43, 0, 3, 200, 89, 210, 159, 105, 146, 247, 185, 165, 120, 244, 248, 194, 27, 104, 41, 152, 30, 62, 96, 180, 214, 203, 220, 203, 254, 155, 71, 170, 113, 41, 45, 42, 170, 32, 176, 20, 217, 48, 87, 237, 191, 59, 167, 202, 94, 139, 88, 52, 23, 126, 171, 236, 157, 243, 122, 148, 137, 206, 57, 229, 219, 149, 227, 45, 153, 236, 92, 160, 116, 26, 138, 205, 141, 194, 15, 145, 185, 231, 136, 102, 255, 4, 88, 247, 240, 116, 82, 36, 130, 16, 231, 2, 32, 109, 223, 28, 162, 180, 35, 173, 62, 121, 3, 153, 235, 231, 104, 173, 177, 160, 253, 121, 169, 125, 235, 32, 53, 176, 166 },
                            PasswordSalt = new byte[] { 197, 167, 146, 129, 161, 211, 255, 106, 175, 35, 38, 119, 217, 254, 240, 219, 93, 216, 17, 55, 245, 103, 158, 109, 102, 200, 28, 100, 109, 235, 160, 110, 51, 196, 4, 146, 141, 185, 98, 202, 23, 191, 157, 183, 170, 114, 32, 8, 32, 84, 112, 174, 217, 253, 154, 158, 231, 143, 102, 191, 228, 120, 85, 141 },
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            Email = "Selda_Denkel@yahoo.com",
                            FirstName = "Selda",
                            LastName = "Denkel",
                            PasswordHash = new byte[] { 191, 98, 181, 194, 230, 43, 0, 3, 200, 89, 210, 159, 105, 146, 247, 185, 165, 120, 244, 248, 194, 27, 104, 41, 152, 30, 62, 96, 180, 214, 203, 220, 203, 254, 155, 71, 170, 113, 41, 45, 42, 170, 32, 176, 20, 217, 48, 87, 237, 191, 59, 167, 202, 94, 139, 88, 52, 23, 126, 171, 236, 157, 243, 122, 148, 137, 206, 57, 229, 219, 149, 227, 45, 153, 236, 92, 160, 116, 26, 138, 205, 141, 194, 15, 145, 185, 231, 136, 102, 255, 4, 88, 247, 240, 116, 82, 36, 130, 16, 231, 2, 32, 109, 223, 28, 162, 180, 35, 173, 62, 121, 3, 153, 235, 231, 104, 173, 177, 160, 253, 121, 169, 125, 235, 32, 53, 176, 166 },
                            PasswordSalt = new byte[] { 197, 167, 146, 129, 161, 211, 255, 106, 175, 35, 38, 119, 217, 254, 240, 219, 93, 216, 17, 55, 245, 103, 158, 109, 102, 200, 28, 100, 109, 235, 160, 110, 51, 196, 4, 146, 141, 185, 98, 202, 23, 191, 157, 183, 170, 114, 32, 8, 32, 84, 112, 174, 217, 253, 154, 158, 231, 143, 102, 191, 228, 120, 85, 141 },
                            Status = true
                        },
                        new
                        {
                            Id = 6,
                            Email = "Eren.Erbay29@hotmail.com",
                            FirstName = "Eren",
                            LastName = "Erbay",
                            PasswordHash = new byte[] { 191, 98, 181, 194, 230, 43, 0, 3, 200, 89, 210, 159, 105, 146, 247, 185, 165, 120, 244, 248, 194, 27, 104, 41, 152, 30, 62, 96, 180, 214, 203, 220, 203, 254, 155, 71, 170, 113, 41, 45, 42, 170, 32, 176, 20, 217, 48, 87, 237, 191, 59, 167, 202, 94, 139, 88, 52, 23, 126, 171, 236, 157, 243, 122, 148, 137, 206, 57, 229, 219, 149, 227, 45, 153, 236, 92, 160, 116, 26, 138, 205, 141, 194, 15, 145, 185, 231, 136, 102, 255, 4, 88, 247, 240, 116, 82, 36, 130, 16, 231, 2, 32, 109, 223, 28, 162, 180, 35, 173, 62, 121, 3, 153, 235, 231, 104, 173, 177, 160, 253, 121, 169, 125, 235, 32, 53, 176, 166 },
                            PasswordSalt = new byte[] { 197, 167, 146, 129, 161, 211, 255, 106, 175, 35, 38, 119, 217, 254, 240, 219, 93, 216, 17, 55, 245, 103, 158, 109, 102, 200, 28, 100, 109, 235, 160, 110, 51, 196, 4, 146, 141, 185, 98, 202, 23, 191, 157, 183, 170, 114, 32, 8, 32, 84, 112, 174, 217, 253, 154, 158, 231, 143, 102, 191, 228, 120, 85, 141 },
                            Status = true
                        },
                        new
                        {
                            Id = 7,
                            Email = "Memduh.Cevik@gmail.com",
                            FirstName = "Memduh",
                            LastName = "Çevik",
                            PasswordHash = new byte[] { 191, 98, 181, 194, 230, 43, 0, 3, 200, 89, 210, 159, 105, 146, 247, 185, 165, 120, 244, 248, 194, 27, 104, 41, 152, 30, 62, 96, 180, 214, 203, 220, 203, 254, 155, 71, 170, 113, 41, 45, 42, 170, 32, 176, 20, 217, 48, 87, 237, 191, 59, 167, 202, 94, 139, 88, 52, 23, 126, 171, 236, 157, 243, 122, 148, 137, 206, 57, 229, 219, 149, 227, 45, 153, 236, 92, 160, 116, 26, 138, 205, 141, 194, 15, 145, 185, 231, 136, 102, 255, 4, 88, 247, 240, 116, 82, 36, 130, 16, 231, 2, 32, 109, 223, 28, 162, 180, 35, 173, 62, 121, 3, 153, 235, 231, 104, 173, 177, 160, 253, 121, 169, 125, 235, 32, 53, 176, 166 },
                            PasswordSalt = new byte[] { 197, 167, 146, 129, 161, 211, 255, 106, 175, 35, 38, 119, 217, 254, 240, 219, 93, 216, 17, 55, 245, 103, 158, 109, 102, 200, 28, 100, 109, 235, 160, 110, 51, 196, 4, 146, 141, 185, 98, 202, 23, 191, 157, 183, 170, 114, 32, 8, 32, 84, 112, 174, 217, 253, 154, 158, 231, 143, 102, 191, 228, 120, 85, 141 },
                            Status = false
                        },
                        new
                        {
                            Id = 8,
                            Email = "Yasar.Dagdas@hotmail.com",
                            FirstName = "Yaşar",
                            LastName = "Dağdaş",
                            PasswordHash = new byte[] { 191, 98, 181, 194, 230, 43, 0, 3, 200, 89, 210, 159, 105, 146, 247, 185, 165, 120, 244, 248, 194, 27, 104, 41, 152, 30, 62, 96, 180, 214, 203, 220, 203, 254, 155, 71, 170, 113, 41, 45, 42, 170, 32, 176, 20, 217, 48, 87, 237, 191, 59, 167, 202, 94, 139, 88, 52, 23, 126, 171, 236, 157, 243, 122, 148, 137, 206, 57, 229, 219, 149, 227, 45, 153, 236, 92, 160, 116, 26, 138, 205, 141, 194, 15, 145, 185, 231, 136, 102, 255, 4, 88, 247, 240, 116, 82, 36, 130, 16, 231, 2, 32, 109, 223, 28, 162, 180, 35, 173, 62, 121, 3, 153, 235, 231, 104, 173, 177, 160, 253, 121, 169, 125, 235, 32, 53, 176, 166 },
                            PasswordSalt = new byte[] { 197, 167, 146, 129, 161, 211, 255, 106, 175, 35, 38, 119, 217, 254, 240, 219, 93, 216, 17, 55, 245, 103, 158, 109, 102, 200, 28, 100, 109, 235, 160, 110, 51, 196, 4, 146, 141, 185, 98, 202, 23, 191, 157, 183, 170, 114, 32, 8, 32, 84, 112, 174, 217, 253, 154, 158, 231, 143, 102, 191, 228, 120, 85, 141 },
                            Status = true
                        },
                        new
                        {
                            Id = 9,
                            Email = "Oguzhan_Ilicali82@hotmail.com",
                            FirstName = "Oğuzhan",
                            LastName = "Ilıcalı",
                            PasswordHash = new byte[] { 191, 98, 181, 194, 230, 43, 0, 3, 200, 89, 210, 159, 105, 146, 247, 185, 165, 120, 244, 248, 194, 27, 104, 41, 152, 30, 62, 96, 180, 214, 203, 220, 203, 254, 155, 71, 170, 113, 41, 45, 42, 170, 32, 176, 20, 217, 48, 87, 237, 191, 59, 167, 202, 94, 139, 88, 52, 23, 126, 171, 236, 157, 243, 122, 148, 137, 206, 57, 229, 219, 149, 227, 45, 153, 236, 92, 160, 116, 26, 138, 205, 141, 194, 15, 145, 185, 231, 136, 102, 255, 4, 88, 247, 240, 116, 82, 36, 130, 16, 231, 2, 32, 109, 223, 28, 162, 180, 35, 173, 62, 121, 3, 153, 235, 231, 104, 173, 177, 160, 253, 121, 169, 125, 235, 32, 53, 176, 166 },
                            PasswordSalt = new byte[] { 197, 167, 146, 129, 161, 211, 255, 106, 175, 35, 38, 119, 217, 254, 240, 219, 93, 216, 17, 55, 245, 103, 158, 109, 102, 200, 28, 100, 109, 235, 160, 110, 51, 196, 4, 146, 141, 185, 98, 202, 23, 191, 157, 183, 170, 114, 32, 8, 32, 84, 112, 174, 217, 253, 154, 158, 231, 143, 102, 191, 228, 120, 85, 141 },
                            Status = true
                        },
                        new
                        {
                            Id = 10,
                            Email = "Meric_Erkekli@gmail.com",
                            FirstName = "Meriç",
                            LastName = "Erkekli",
                            PasswordHash = new byte[] { 191, 98, 181, 194, 230, 43, 0, 3, 200, 89, 210, 159, 105, 146, 247, 185, 165, 120, 244, 248, 194, 27, 104, 41, 152, 30, 62, 96, 180, 214, 203, 220, 203, 254, 155, 71, 170, 113, 41, 45, 42, 170, 32, 176, 20, 217, 48, 87, 237, 191, 59, 167, 202, 94, 139, 88, 52, 23, 126, 171, 236, 157, 243, 122, 148, 137, 206, 57, 229, 219, 149, 227, 45, 153, 236, 92, 160, 116, 26, 138, 205, 141, 194, 15, 145, 185, 231, 136, 102, 255, 4, 88, 247, 240, 116, 82, 36, 130, 16, 231, 2, 32, 109, 223, 28, 162, 180, 35, 173, 62, 121, 3, 153, 235, 231, 104, 173, 177, 160, 253, 121, 169, 125, 235, 32, 53, 176, 166 },
                            PasswordSalt = new byte[] { 197, 167, 146, 129, 161, 211, 255, 106, 175, 35, 38, 119, 217, 254, 240, 219, 93, 216, 17, 55, 245, 103, 158, 109, 102, 200, 28, 100, 109, 235, 160, 110, 51, 196, 4, 146, 141, 185, 98, 202, 23, 191, 157, 183, 170, 114, 32, 8, 32, 84, 112, 174, 217, 253, 154, 158, 231, 143, 102, 191, 228, 120, 85, 141 },
                            Status = true
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Core.Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SocialMediaAccount", b =>
                {
                    b.HasOne("Domain.Entities.Developer", "Developer")
                        .WithMany("SocialMediaAccounts")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("Domain.Entities.Technology", b =>
                {
                    b.HasOne("Domain.Entities.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany("Technologies")
                        .HasForeignKey("ProgrammingLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgrammingLanguage");
                });

            modelBuilder.Entity("Core.Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Core.Domain.Entities.User", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.ProgrammingLanguage", b =>
                {
                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("Domain.Entities.Developer", b =>
                {
                    b.Navigation("SocialMediaAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
