// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220910172223_Add-SeedData-DeveloperTable")]
    partial class AddSeedDataDeveloperTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("Core.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Core.Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "OperationClaimId");

                    b.HasIndex("OperationClaimId");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.ProgrammingLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProgrammingLanguages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Java"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Go"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Python"
                        },
                        new
                        {
                            Id = 5,
                            Name = "JavaScript"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SocialMediaAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DeveloperId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.ToTable("SocialMediaAccounts");
                });

            modelBuilder.Entity("Domain.Entities.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgrammingLanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammingLanguageId");

                    b.ToTable("Technologies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Asp.Net",
                            ProgrammingLanguageId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Blazor",
                            ProgrammingLanguageId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = ".Net MAUI",
                            ProgrammingLanguageId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Spring",
                            ProgrammingLanguageId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "JSP",
                            ProgrammingLanguageId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "Gin",
                            ProgrammingLanguageId = 3
                        },
                        new
                        {
                            Id = 7,
                            Name = "Django",
                            ProgrammingLanguageId = 4
                        },
                        new
                        {
                            Id = 8,
                            Name = "Flask",
                            ProgrammingLanguageId = 4
                        },
                        new
                        {
                            Id = 9,
                            Name = "Angular",
                            ProgrammingLanguageId = 5
                        },
                        new
                        {
                            Id = 10,
                            Name = "Vue",
                            ProgrammingLanguageId = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.Developer", b =>
                {
                    b.HasBaseType("Core.Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Developer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Dilhan86@hotmail.com",
                            FirstName = "Dilhan",
                            LastName = "Çörekçi",
                            PasswordHash = new byte[] { 191, 152, 81, 208, 77, 245, 143, 249, 238, 247, 183, 125, 158, 105, 76, 129, 16, 207, 2, 79, 168, 24, 115, 251, 209, 177, 113, 136, 216, 109, 207, 226, 115, 61, 89, 113, 234, 147, 226, 98, 130, 244, 13, 210, 215, 134, 126, 134, 166, 204, 246, 141, 57, 99, 161, 229, 201, 175, 93, 149, 163, 156, 21, 78, 120, 133, 100, 42, 203, 202, 185, 219, 202, 193, 60, 134, 198, 61, 54, 252, 197, 160, 31, 146, 16, 20, 14, 35, 25, 231, 19, 72, 188, 123, 1, 189, 123, 135, 163, 119, 126, 235, 187, 158, 8, 15, 211, 140, 100, 204, 16, 223, 211, 13, 250, 45, 93, 22, 84, 160, 51, 142, 10, 134, 19, 60, 14, 229 },
                            PasswordSalt = new byte[] { 233, 183, 100, 16, 194, 9, 25, 105, 206, 226, 211, 6, 236, 81, 128, 214, 97, 82, 229, 5, 150, 232, 107, 57, 249, 106, 20, 146, 85, 150, 63, 48, 209, 165, 204, 90, 163, 186, 203, 138, 19, 16, 61, 76, 89, 42, 251, 109, 81, 43, 64, 252, 204, 164, 139, 222, 28, 136, 47, 132, 51, 95, 33, 106 },
                            Status = false
                        },
                        new
                        {
                            Id = 2,
                            Email = "Haluk14@yahoo.com",
                            FirstName = "Haluk",
                            LastName = "Çörekçi",
                            PasswordHash = new byte[] { 191, 152, 81, 208, 77, 245, 143, 249, 238, 247, 183, 125, 158, 105, 76, 129, 16, 207, 2, 79, 168, 24, 115, 251, 209, 177, 113, 136, 216, 109, 207, 226, 115, 61, 89, 113, 234, 147, 226, 98, 130, 244, 13, 210, 215, 134, 126, 134, 166, 204, 246, 141, 57, 99, 161, 229, 201, 175, 93, 149, 163, 156, 21, 78, 120, 133, 100, 42, 203, 202, 185, 219, 202, 193, 60, 134, 198, 61, 54, 252, 197, 160, 31, 146, 16, 20, 14, 35, 25, 231, 19, 72, 188, 123, 1, 189, 123, 135, 163, 119, 126, 235, 187, 158, 8, 15, 211, 140, 100, 204, 16, 223, 211, 13, 250, 45, 93, 22, 84, 160, 51, 142, 10, 134, 19, 60, 14, 229 },
                            PasswordSalt = new byte[] { 233, 183, 100, 16, 194, 9, 25, 105, 206, 226, 211, 6, 236, 81, 128, 214, 97, 82, 229, 5, 150, 232, 107, 57, 249, 106, 20, 146, 85, 150, 63, 48, 209, 165, 204, 90, 163, 186, 203, 138, 19, 16, 61, 76, 89, 42, 251, 109, 81, 43, 64, 252, 204, 164, 139, 222, 28, 136, 47, 132, 51, 95, 33, 106 },
                            Status = false
                        },
                        new
                        {
                            Id = 3,
                            Email = "Umran.Mertoglu@gmail.com",
                            FirstName = "Ümran",
                            LastName = "Mertoğlu",
                            PasswordHash = new byte[] { 191, 152, 81, 208, 77, 245, 143, 249, 238, 247, 183, 125, 158, 105, 76, 129, 16, 207, 2, 79, 168, 24, 115, 251, 209, 177, 113, 136, 216, 109, 207, 226, 115, 61, 89, 113, 234, 147, 226, 98, 130, 244, 13, 210, 215, 134, 126, 134, 166, 204, 246, 141, 57, 99, 161, 229, 201, 175, 93, 149, 163, 156, 21, 78, 120, 133, 100, 42, 203, 202, 185, 219, 202, 193, 60, 134, 198, 61, 54, 252, 197, 160, 31, 146, 16, 20, 14, 35, 25, 231, 19, 72, 188, 123, 1, 189, 123, 135, 163, 119, 126, 235, 187, 158, 8, 15, 211, 140, 100, 204, 16, 223, 211, 13, 250, 45, 93, 22, 84, 160, 51, 142, 10, 134, 19, 60, 14, 229 },
                            PasswordSalt = new byte[] { 233, 183, 100, 16, 194, 9, 25, 105, 206, 226, 211, 6, 236, 81, 128, 214, 97, 82, 229, 5, 150, 232, 107, 57, 249, 106, 20, 146, 85, 150, 63, 48, 209, 165, 204, 90, 163, 186, 203, 138, 19, 16, 61, 76, 89, 42, 251, 109, 81, 43, 64, 252, 204, 164, 139, 222, 28, 136, 47, 132, 51, 95, 33, 106 },
                            Status = false
                        },
                        new
                        {
                            Id = 4,
                            Email = "Mukaddes.Tasci@yahoo.com",
                            FirstName = "Mukaddes",
                            LastName = "Taşçı",
                            PasswordHash = new byte[] { 191, 152, 81, 208, 77, 245, 143, 249, 238, 247, 183, 125, 158, 105, 76, 129, 16, 207, 2, 79, 168, 24, 115, 251, 209, 177, 113, 136, 216, 109, 207, 226, 115, 61, 89, 113, 234, 147, 226, 98, 130, 244, 13, 210, 215, 134, 126, 134, 166, 204, 246, 141, 57, 99, 161, 229, 201, 175, 93, 149, 163, 156, 21, 78, 120, 133, 100, 42, 203, 202, 185, 219, 202, 193, 60, 134, 198, 61, 54, 252, 197, 160, 31, 146, 16, 20, 14, 35, 25, 231, 19, 72, 188, 123, 1, 189, 123, 135, 163, 119, 126, 235, 187, 158, 8, 15, 211, 140, 100, 204, 16, 223, 211, 13, 250, 45, 93, 22, 84, 160, 51, 142, 10, 134, 19, 60, 14, 229 },
                            PasswordSalt = new byte[] { 233, 183, 100, 16, 194, 9, 25, 105, 206, 226, 211, 6, 236, 81, 128, 214, 97, 82, 229, 5, 150, 232, 107, 57, 249, 106, 20, 146, 85, 150, 63, 48, 209, 165, 204, 90, 163, 186, 203, 138, 19, 16, 61, 76, 89, 42, 251, 109, 81, 43, 64, 252, 204, 164, 139, 222, 28, 136, 47, 132, 51, 95, 33, 106 },
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            Email = "Kerim_Akman84@gmail.com",
                            FirstName = "Kerim",
                            LastName = "Akman",
                            PasswordHash = new byte[] { 191, 152, 81, 208, 77, 245, 143, 249, 238, 247, 183, 125, 158, 105, 76, 129, 16, 207, 2, 79, 168, 24, 115, 251, 209, 177, 113, 136, 216, 109, 207, 226, 115, 61, 89, 113, 234, 147, 226, 98, 130, 244, 13, 210, 215, 134, 126, 134, 166, 204, 246, 141, 57, 99, 161, 229, 201, 175, 93, 149, 163, 156, 21, 78, 120, 133, 100, 42, 203, 202, 185, 219, 202, 193, 60, 134, 198, 61, 54, 252, 197, 160, 31, 146, 16, 20, 14, 35, 25, 231, 19, 72, 188, 123, 1, 189, 123, 135, 163, 119, 126, 235, 187, 158, 8, 15, 211, 140, 100, 204, 16, 223, 211, 13, 250, 45, 93, 22, 84, 160, 51, 142, 10, 134, 19, 60, 14, 229 },
                            PasswordSalt = new byte[] { 233, 183, 100, 16, 194, 9, 25, 105, 206, 226, 211, 6, 236, 81, 128, 214, 97, 82, 229, 5, 150, 232, 107, 57, 249, 106, 20, 146, 85, 150, 63, 48, 209, 165, 204, 90, 163, 186, 203, 138, 19, 16, 61, 76, 89, 42, 251, 109, 81, 43, 64, 252, 204, 164, 139, 222, 28, 136, 47, 132, 51, 95, 33, 106 },
                            Status = false
                        },
                        new
                        {
                            Id = 6,
                            Email = "Duygu65@hotmail.com",
                            FirstName = "Duygu",
                            LastName = "Elçiboğa",
                            PasswordHash = new byte[] { 191, 152, 81, 208, 77, 245, 143, 249, 238, 247, 183, 125, 158, 105, 76, 129, 16, 207, 2, 79, 168, 24, 115, 251, 209, 177, 113, 136, 216, 109, 207, 226, 115, 61, 89, 113, 234, 147, 226, 98, 130, 244, 13, 210, 215, 134, 126, 134, 166, 204, 246, 141, 57, 99, 161, 229, 201, 175, 93, 149, 163, 156, 21, 78, 120, 133, 100, 42, 203, 202, 185, 219, 202, 193, 60, 134, 198, 61, 54, 252, 197, 160, 31, 146, 16, 20, 14, 35, 25, 231, 19, 72, 188, 123, 1, 189, 123, 135, 163, 119, 126, 235, 187, 158, 8, 15, 211, 140, 100, 204, 16, 223, 211, 13, 250, 45, 93, 22, 84, 160, 51, 142, 10, 134, 19, 60, 14, 229 },
                            PasswordSalt = new byte[] { 233, 183, 100, 16, 194, 9, 25, 105, 206, 226, 211, 6, 236, 81, 128, 214, 97, 82, 229, 5, 150, 232, 107, 57, 249, 106, 20, 146, 85, 150, 63, 48, 209, 165, 204, 90, 163, 186, 203, 138, 19, 16, 61, 76, 89, 42, 251, 109, 81, 43, 64, 252, 204, 164, 139, 222, 28, 136, 47, 132, 51, 95, 33, 106 },
                            Status = false
                        },
                        new
                        {
                            Id = 7,
                            Email = "Pervin36@yahoo.com",
                            FirstName = "Pervin",
                            LastName = "Elmastaşoğlu",
                            PasswordHash = new byte[] { 191, 152, 81, 208, 77, 245, 143, 249, 238, 247, 183, 125, 158, 105, 76, 129, 16, 207, 2, 79, 168, 24, 115, 251, 209, 177, 113, 136, 216, 109, 207, 226, 115, 61, 89, 113, 234, 147, 226, 98, 130, 244, 13, 210, 215, 134, 126, 134, 166, 204, 246, 141, 57, 99, 161, 229, 201, 175, 93, 149, 163, 156, 21, 78, 120, 133, 100, 42, 203, 202, 185, 219, 202, 193, 60, 134, 198, 61, 54, 252, 197, 160, 31, 146, 16, 20, 14, 35, 25, 231, 19, 72, 188, 123, 1, 189, 123, 135, 163, 119, 126, 235, 187, 158, 8, 15, 211, 140, 100, 204, 16, 223, 211, 13, 250, 45, 93, 22, 84, 160, 51, 142, 10, 134, 19, 60, 14, 229 },
                            PasswordSalt = new byte[] { 233, 183, 100, 16, 194, 9, 25, 105, 206, 226, 211, 6, 236, 81, 128, 214, 97, 82, 229, 5, 150, 232, 107, 57, 249, 106, 20, 146, 85, 150, 63, 48, 209, 165, 204, 90, 163, 186, 203, 138, 19, 16, 61, 76, 89, 42, 251, 109, 81, 43, 64, 252, 204, 164, 139, 222, 28, 136, 47, 132, 51, 95, 33, 106 },
                            Status = true
                        },
                        new
                        {
                            Id = 8,
                            Email = "Safi.Kaplangi11@gmail.com",
                            FirstName = "Şâfi",
                            LastName = "Kaplangı",
                            PasswordHash = new byte[] { 191, 152, 81, 208, 77, 245, 143, 249, 238, 247, 183, 125, 158, 105, 76, 129, 16, 207, 2, 79, 168, 24, 115, 251, 209, 177, 113, 136, 216, 109, 207, 226, 115, 61, 89, 113, 234, 147, 226, 98, 130, 244, 13, 210, 215, 134, 126, 134, 166, 204, 246, 141, 57, 99, 161, 229, 201, 175, 93, 149, 163, 156, 21, 78, 120, 133, 100, 42, 203, 202, 185, 219, 202, 193, 60, 134, 198, 61, 54, 252, 197, 160, 31, 146, 16, 20, 14, 35, 25, 231, 19, 72, 188, 123, 1, 189, 123, 135, 163, 119, 126, 235, 187, 158, 8, 15, 211, 140, 100, 204, 16, 223, 211, 13, 250, 45, 93, 22, 84, 160, 51, 142, 10, 134, 19, 60, 14, 229 },
                            PasswordSalt = new byte[] { 233, 183, 100, 16, 194, 9, 25, 105, 206, 226, 211, 6, 236, 81, 128, 214, 97, 82, 229, 5, 150, 232, 107, 57, 249, 106, 20, 146, 85, 150, 63, 48, 209, 165, 204, 90, 163, 186, 203, 138, 19, 16, 61, 76, 89, 42, 251, 109, 81, 43, 64, 252, 204, 164, 139, 222, 28, 136, 47, 132, 51, 95, 33, 106 },
                            Status = true
                        },
                        new
                        {
                            Id = 9,
                            Email = "Belemir_Elmastasoglu@yahoo.com",
                            FirstName = "Belemir",
                            LastName = "Elmastaşoğlu",
                            PasswordHash = new byte[] { 191, 152, 81, 208, 77, 245, 143, 249, 238, 247, 183, 125, 158, 105, 76, 129, 16, 207, 2, 79, 168, 24, 115, 251, 209, 177, 113, 136, 216, 109, 207, 226, 115, 61, 89, 113, 234, 147, 226, 98, 130, 244, 13, 210, 215, 134, 126, 134, 166, 204, 246, 141, 57, 99, 161, 229, 201, 175, 93, 149, 163, 156, 21, 78, 120, 133, 100, 42, 203, 202, 185, 219, 202, 193, 60, 134, 198, 61, 54, 252, 197, 160, 31, 146, 16, 20, 14, 35, 25, 231, 19, 72, 188, 123, 1, 189, 123, 135, 163, 119, 126, 235, 187, 158, 8, 15, 211, 140, 100, 204, 16, 223, 211, 13, 250, 45, 93, 22, 84, 160, 51, 142, 10, 134, 19, 60, 14, 229 },
                            PasswordSalt = new byte[] { 233, 183, 100, 16, 194, 9, 25, 105, 206, 226, 211, 6, 236, 81, 128, 214, 97, 82, 229, 5, 150, 232, 107, 57, 249, 106, 20, 146, 85, 150, 63, 48, 209, 165, 204, 90, 163, 186, 203, 138, 19, 16, 61, 76, 89, 42, 251, 109, 81, 43, 64, 252, 204, 164, 139, 222, 28, 136, 47, 132, 51, 95, 33, 106 },
                            Status = true
                        },
                        new
                        {
                            Id = 10,
                            Email = "Elif43@gmail.com",
                            FirstName = "Elif",
                            LastName = "Atan",
                            PasswordHash = new byte[] { 191, 152, 81, 208, 77, 245, 143, 249, 238, 247, 183, 125, 158, 105, 76, 129, 16, 207, 2, 79, 168, 24, 115, 251, 209, 177, 113, 136, 216, 109, 207, 226, 115, 61, 89, 113, 234, 147, 226, 98, 130, 244, 13, 210, 215, 134, 126, 134, 166, 204, 246, 141, 57, 99, 161, 229, 201, 175, 93, 149, 163, 156, 21, 78, 120, 133, 100, 42, 203, 202, 185, 219, 202, 193, 60, 134, 198, 61, 54, 252, 197, 160, 31, 146, 16, 20, 14, 35, 25, 231, 19, 72, 188, 123, 1, 189, 123, 135, 163, 119, 126, 235, 187, 158, 8, 15, 211, 140, 100, 204, 16, 223, 211, 13, 250, 45, 93, 22, 84, 160, 51, 142, 10, 134, 19, 60, 14, 229 },
                            PasswordSalt = new byte[] { 233, 183, 100, 16, 194, 9, 25, 105, 206, 226, 211, 6, 236, 81, 128, 214, 97, 82, 229, 5, 150, 232, 107, 57, 249, 106, 20, 146, 85, 150, 63, 48, 209, 165, 204, 90, 163, 186, 203, 138, 19, 16, 61, 76, 89, 42, 251, 109, 81, 43, 64, 252, 204, 164, 139, 222, 28, 136, 47, 132, 51, 95, 33, 106 },
                            Status = false
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Core.Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SocialMediaAccount", b =>
                {
                    b.HasOne("Domain.Entities.Developer", "Developer")
                        .WithMany("SocialMediaAccounts")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("Domain.Entities.Technology", b =>
                {
                    b.HasOne("Domain.Entities.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany("Technologies")
                        .HasForeignKey("ProgrammingLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgrammingLanguage");
                });

            modelBuilder.Entity("Core.Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Core.Domain.Entities.User", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.ProgrammingLanguage", b =>
                {
                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("Domain.Entities.Developer", b =>
                {
                    b.Navigation("SocialMediaAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
