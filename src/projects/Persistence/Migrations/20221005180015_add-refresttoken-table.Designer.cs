// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221005180015_add-refresttoken-table")]
    partial class addrefresttokentable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("Core.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Core.Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "OperationClaimId");

                    b.HasIndex("OperationClaimId");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.ProgrammingLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProgrammingLanguages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Java"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Go"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Python"
                        },
                        new
                        {
                            Id = 5,
                            Name = "JavaScript"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SocialMediaAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DeveloperId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.ToTable("SocialMediaAccounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeveloperId = 1,
                            Link = "www.github.com/Beceapa.Sandalci61",
                            Website = "Github"
                        },
                        new
                        {
                            Id = 2,
                            DeveloperId = 2,
                            Link = "www.github.com/Batu.Akyurek",
                            Website = "Github"
                        },
                        new
                        {
                            Id = 3,
                            DeveloperId = 3,
                            Link = "www.github.com/Bengi_Topcuoglu",
                            Website = "Github"
                        },
                        new
                        {
                            Id = 4,
                            DeveloperId = 4,
                            Link = "www.github.com/Buzac_Karabulut99",
                            Website = "Github"
                        },
                        new
                        {
                            Id = 5,
                            DeveloperId = 5,
                            Link = "www.github.com/Budunlu.Kurutluoglu89",
                            Website = "Github"
                        },
                        new
                        {
                            Id = 6,
                            DeveloperId = 6,
                            Link = "www.github.com/Budus_Sarioglu",
                            Website = "Github"
                        },
                        new
                        {
                            Id = 7,
                            DeveloperId = 7,
                            Link = "www.github.com/Gokboru_Limoncuoglu51",
                            Website = "Github"
                        },
                        new
                        {
                            Id = 8,
                            DeveloperId = 8,
                            Link = "www.github.com/Erdem.Sozeri62",
                            Website = "Github"
                        },
                        new
                        {
                            Id = 9,
                            DeveloperId = 9,
                            Link = "www.github.com/Barkdurdu14",
                            Website = "Github"
                        },
                        new
                        {
                            Id = 10,
                            DeveloperId = 10,
                            Link = "www.github.com/Bucur.Sozeri38",
                            Website = "Github"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgrammingLanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammingLanguageId");

                    b.ToTable("Technologies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Asp.Net",
                            ProgrammingLanguageId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Blazor",
                            ProgrammingLanguageId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = ".Net MAUI",
                            ProgrammingLanguageId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Spring",
                            ProgrammingLanguageId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "JSP",
                            ProgrammingLanguageId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "Gin",
                            ProgrammingLanguageId = 3
                        },
                        new
                        {
                            Id = 7,
                            Name = "Django",
                            ProgrammingLanguageId = 4
                        },
                        new
                        {
                            Id = 8,
                            Name = "Flask",
                            ProgrammingLanguageId = 4
                        },
                        new
                        {
                            Id = 9,
                            Name = "Angular",
                            ProgrammingLanguageId = 5
                        },
                        new
                        {
                            Id = 10,
                            Name = "Vue",
                            ProgrammingLanguageId = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.Developer", b =>
                {
                    b.HasBaseType("Core.Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Developer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Azmi43@hotmail.com",
                            FirstName = "Azmi",
                            LastName = "Kurutluoğlu",
                            PasswordHash = new byte[] { 125, 248, 108, 240, 150, 13, 102, 91, 226, 28, 222, 181, 0, 126, 8, 106, 124, 25, 24, 225, 178, 23, 175, 114, 126, 236, 70, 62, 18, 60, 150, 190, 241, 215, 96, 82, 69, 150, 150, 117, 106, 111, 87, 246, 193, 65, 154, 156, 155, 208, 8, 173, 76, 173, 1, 202, 154, 104, 217, 126, 235, 113, 107, 146, 53, 91, 23, 212, 226, 165, 85, 16, 134, 83, 173, 152, 91, 160, 50, 252, 110, 59, 147, 182, 22, 200, 49, 40, 202, 64, 120, 117, 124, 129, 96, 229, 79, 109, 46, 84, 58, 117, 253, 151, 182, 97, 180, 168, 20, 250, 99, 136, 89, 51, 207, 199, 249, 210, 155, 165, 233, 107, 229, 122, 40, 37, 203, 203 },
                            PasswordSalt = new byte[] { 25, 38, 34, 133, 34, 104, 95, 160, 62, 86, 41, 153, 39, 220, 7, 42, 135, 0, 245, 106, 115, 147, 64, 132, 40, 130, 97, 156, 139, 2, 137, 135, 210, 158, 23, 177, 212, 223, 106, 153, 123, 153, 246, 120, 49, 68, 215, 142, 213, 252, 0, 41, 7, 187, 186, 18, 26, 93, 100, 173, 33, 1, 212, 60 },
                            Status = false
                        },
                        new
                        {
                            Id = 2,
                            Email = "Ummiye.Ercetin@hotmail.com",
                            FirstName = "Ümmiye",
                            LastName = "Erçetin",
                            PasswordHash = new byte[] { 125, 248, 108, 240, 150, 13, 102, 91, 226, 28, 222, 181, 0, 126, 8, 106, 124, 25, 24, 225, 178, 23, 175, 114, 126, 236, 70, 62, 18, 60, 150, 190, 241, 215, 96, 82, 69, 150, 150, 117, 106, 111, 87, 246, 193, 65, 154, 156, 155, 208, 8, 173, 76, 173, 1, 202, 154, 104, 217, 126, 235, 113, 107, 146, 53, 91, 23, 212, 226, 165, 85, 16, 134, 83, 173, 152, 91, 160, 50, 252, 110, 59, 147, 182, 22, 200, 49, 40, 202, 64, 120, 117, 124, 129, 96, 229, 79, 109, 46, 84, 58, 117, 253, 151, 182, 97, 180, 168, 20, 250, 99, 136, 89, 51, 207, 199, 249, 210, 155, 165, 233, 107, 229, 122, 40, 37, 203, 203 },
                            PasswordSalt = new byte[] { 25, 38, 34, 133, 34, 104, 95, 160, 62, 86, 41, 153, 39, 220, 7, 42, 135, 0, 245, 106, 115, 147, 64, 132, 40, 130, 97, 156, 139, 2, 137, 135, 210, 158, 23, 177, 212, 223, 106, 153, 123, 153, 246, 120, 49, 68, 215, 142, 213, 252, 0, 41, 7, 187, 186, 18, 26, 93, 100, 173, 33, 1, 212, 60 },
                            Status = false
                        },
                        new
                        {
                            Id = 3,
                            Email = "Gulriz.Kocyigit@yahoo.com",
                            FirstName = "Gülriz",
                            LastName = "Koçyiğit",
                            PasswordHash = new byte[] { 125, 248, 108, 240, 150, 13, 102, 91, 226, 28, 222, 181, 0, 126, 8, 106, 124, 25, 24, 225, 178, 23, 175, 114, 126, 236, 70, 62, 18, 60, 150, 190, 241, 215, 96, 82, 69, 150, 150, 117, 106, 111, 87, 246, 193, 65, 154, 156, 155, 208, 8, 173, 76, 173, 1, 202, 154, 104, 217, 126, 235, 113, 107, 146, 53, 91, 23, 212, 226, 165, 85, 16, 134, 83, 173, 152, 91, 160, 50, 252, 110, 59, 147, 182, 22, 200, 49, 40, 202, 64, 120, 117, 124, 129, 96, 229, 79, 109, 46, 84, 58, 117, 253, 151, 182, 97, 180, 168, 20, 250, 99, 136, 89, 51, 207, 199, 249, 210, 155, 165, 233, 107, 229, 122, 40, 37, 203, 203 },
                            PasswordSalt = new byte[] { 25, 38, 34, 133, 34, 104, 95, 160, 62, 86, 41, 153, 39, 220, 7, 42, 135, 0, 245, 106, 115, 147, 64, 132, 40, 130, 97, 156, 139, 2, 137, 135, 210, 158, 23, 177, 212, 223, 106, 153, 123, 153, 246, 120, 49, 68, 215, 142, 213, 252, 0, 41, 7, 187, 186, 18, 26, 93, 100, 173, 33, 1, 212, 60 },
                            Status = false
                        },
                        new
                        {
                            Id = 4,
                            Email = "Halit.Avan@gmail.com",
                            FirstName = "Halit",
                            LastName = "Avan",
                            PasswordHash = new byte[] { 125, 248, 108, 240, 150, 13, 102, 91, 226, 28, 222, 181, 0, 126, 8, 106, 124, 25, 24, 225, 178, 23, 175, 114, 126, 236, 70, 62, 18, 60, 150, 190, 241, 215, 96, 82, 69, 150, 150, 117, 106, 111, 87, 246, 193, 65, 154, 156, 155, 208, 8, 173, 76, 173, 1, 202, 154, 104, 217, 126, 235, 113, 107, 146, 53, 91, 23, 212, 226, 165, 85, 16, 134, 83, 173, 152, 91, 160, 50, 252, 110, 59, 147, 182, 22, 200, 49, 40, 202, 64, 120, 117, 124, 129, 96, 229, 79, 109, 46, 84, 58, 117, 253, 151, 182, 97, 180, 168, 20, 250, 99, 136, 89, 51, 207, 199, 249, 210, 155, 165, 233, 107, 229, 122, 40, 37, 203, 203 },
                            PasswordSalt = new byte[] { 25, 38, 34, 133, 34, 104, 95, 160, 62, 86, 41, 153, 39, 220, 7, 42, 135, 0, 245, 106, 115, 147, 64, 132, 40, 130, 97, 156, 139, 2, 137, 135, 210, 158, 23, 177, 212, 223, 106, 153, 123, 153, 246, 120, 49, 68, 215, 142, 213, 252, 0, 41, 7, 187, 186, 18, 26, 93, 100, 173, 33, 1, 212, 60 },
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            Email = "Kasim_Tanrikulu96@hotmail.com",
                            FirstName = "Kasım",
                            LastName = "Tanrıkulu",
                            PasswordHash = new byte[] { 125, 248, 108, 240, 150, 13, 102, 91, 226, 28, 222, 181, 0, 126, 8, 106, 124, 25, 24, 225, 178, 23, 175, 114, 126, 236, 70, 62, 18, 60, 150, 190, 241, 215, 96, 82, 69, 150, 150, 117, 106, 111, 87, 246, 193, 65, 154, 156, 155, 208, 8, 173, 76, 173, 1, 202, 154, 104, 217, 126, 235, 113, 107, 146, 53, 91, 23, 212, 226, 165, 85, 16, 134, 83, 173, 152, 91, 160, 50, 252, 110, 59, 147, 182, 22, 200, 49, 40, 202, 64, 120, 117, 124, 129, 96, 229, 79, 109, 46, 84, 58, 117, 253, 151, 182, 97, 180, 168, 20, 250, 99, 136, 89, 51, 207, 199, 249, 210, 155, 165, 233, 107, 229, 122, 40, 37, 203, 203 },
                            PasswordSalt = new byte[] { 25, 38, 34, 133, 34, 104, 95, 160, 62, 86, 41, 153, 39, 220, 7, 42, 135, 0, 245, 106, 115, 147, 64, 132, 40, 130, 97, 156, 139, 2, 137, 135, 210, 158, 23, 177, 212, 223, 106, 153, 123, 153, 246, 120, 49, 68, 215, 142, 213, 252, 0, 41, 7, 187, 186, 18, 26, 93, 100, 173, 33, 1, 212, 60 },
                            Status = false
                        },
                        new
                        {
                            Id = 6,
                            Email = "Yildirim70@gmail.com",
                            FirstName = "Yıldırım",
                            LastName = "Poçan",
                            PasswordHash = new byte[] { 125, 248, 108, 240, 150, 13, 102, 91, 226, 28, 222, 181, 0, 126, 8, 106, 124, 25, 24, 225, 178, 23, 175, 114, 126, 236, 70, 62, 18, 60, 150, 190, 241, 215, 96, 82, 69, 150, 150, 117, 106, 111, 87, 246, 193, 65, 154, 156, 155, 208, 8, 173, 76, 173, 1, 202, 154, 104, 217, 126, 235, 113, 107, 146, 53, 91, 23, 212, 226, 165, 85, 16, 134, 83, 173, 152, 91, 160, 50, 252, 110, 59, 147, 182, 22, 200, 49, 40, 202, 64, 120, 117, 124, 129, 96, 229, 79, 109, 46, 84, 58, 117, 253, 151, 182, 97, 180, 168, 20, 250, 99, 136, 89, 51, 207, 199, 249, 210, 155, 165, 233, 107, 229, 122, 40, 37, 203, 203 },
                            PasswordSalt = new byte[] { 25, 38, 34, 133, 34, 104, 95, 160, 62, 86, 41, 153, 39, 220, 7, 42, 135, 0, 245, 106, 115, 147, 64, 132, 40, 130, 97, 156, 139, 2, 137, 135, 210, 158, 23, 177, 212, 223, 106, 153, 123, 153, 246, 120, 49, 68, 215, 142, 213, 252, 0, 41, 7, 187, 186, 18, 26, 93, 100, 173, 33, 1, 212, 60 },
                            Status = true
                        },
                        new
                        {
                            Id = 7,
                            Email = "Habil34@hotmail.com",
                            FirstName = "Habil",
                            LastName = "Elmastaşoğlu",
                            PasswordHash = new byte[] { 125, 248, 108, 240, 150, 13, 102, 91, 226, 28, 222, 181, 0, 126, 8, 106, 124, 25, 24, 225, 178, 23, 175, 114, 126, 236, 70, 62, 18, 60, 150, 190, 241, 215, 96, 82, 69, 150, 150, 117, 106, 111, 87, 246, 193, 65, 154, 156, 155, 208, 8, 173, 76, 173, 1, 202, 154, 104, 217, 126, 235, 113, 107, 146, 53, 91, 23, 212, 226, 165, 85, 16, 134, 83, 173, 152, 91, 160, 50, 252, 110, 59, 147, 182, 22, 200, 49, 40, 202, 64, 120, 117, 124, 129, 96, 229, 79, 109, 46, 84, 58, 117, 253, 151, 182, 97, 180, 168, 20, 250, 99, 136, 89, 51, 207, 199, 249, 210, 155, 165, 233, 107, 229, 122, 40, 37, 203, 203 },
                            PasswordSalt = new byte[] { 25, 38, 34, 133, 34, 104, 95, 160, 62, 86, 41, 153, 39, 220, 7, 42, 135, 0, 245, 106, 115, 147, 64, 132, 40, 130, 97, 156, 139, 2, 137, 135, 210, 158, 23, 177, 212, 223, 106, 153, 123, 153, 246, 120, 49, 68, 215, 142, 213, 252, 0, 41, 7, 187, 186, 18, 26, 93, 100, 173, 33, 1, 212, 60 },
                            Status = false
                        },
                        new
                        {
                            Id = 8,
                            Email = "Ebuzer.Babaoglu57@yahoo.com",
                            FirstName = "Ebuzer",
                            LastName = "Babaoğlu",
                            PasswordHash = new byte[] { 125, 248, 108, 240, 150, 13, 102, 91, 226, 28, 222, 181, 0, 126, 8, 106, 124, 25, 24, 225, 178, 23, 175, 114, 126, 236, 70, 62, 18, 60, 150, 190, 241, 215, 96, 82, 69, 150, 150, 117, 106, 111, 87, 246, 193, 65, 154, 156, 155, 208, 8, 173, 76, 173, 1, 202, 154, 104, 217, 126, 235, 113, 107, 146, 53, 91, 23, 212, 226, 165, 85, 16, 134, 83, 173, 152, 91, 160, 50, 252, 110, 59, 147, 182, 22, 200, 49, 40, 202, 64, 120, 117, 124, 129, 96, 229, 79, 109, 46, 84, 58, 117, 253, 151, 182, 97, 180, 168, 20, 250, 99, 136, 89, 51, 207, 199, 249, 210, 155, 165, 233, 107, 229, 122, 40, 37, 203, 203 },
                            PasswordSalt = new byte[] { 25, 38, 34, 133, 34, 104, 95, 160, 62, 86, 41, 153, 39, 220, 7, 42, 135, 0, 245, 106, 115, 147, 64, 132, 40, 130, 97, 156, 139, 2, 137, 135, 210, 158, 23, 177, 212, 223, 106, 153, 123, 153, 246, 120, 49, 68, 215, 142, 213, 252, 0, 41, 7, 187, 186, 18, 26, 93, 100, 173, 33, 1, 212, 60 },
                            Status = false
                        },
                        new
                        {
                            Id = 9,
                            Email = "Adel_Eronat36@yahoo.com",
                            FirstName = "Adel",
                            LastName = "Eronat",
                            PasswordHash = new byte[] { 125, 248, 108, 240, 150, 13, 102, 91, 226, 28, 222, 181, 0, 126, 8, 106, 124, 25, 24, 225, 178, 23, 175, 114, 126, 236, 70, 62, 18, 60, 150, 190, 241, 215, 96, 82, 69, 150, 150, 117, 106, 111, 87, 246, 193, 65, 154, 156, 155, 208, 8, 173, 76, 173, 1, 202, 154, 104, 217, 126, 235, 113, 107, 146, 53, 91, 23, 212, 226, 165, 85, 16, 134, 83, 173, 152, 91, 160, 50, 252, 110, 59, 147, 182, 22, 200, 49, 40, 202, 64, 120, 117, 124, 129, 96, 229, 79, 109, 46, 84, 58, 117, 253, 151, 182, 97, 180, 168, 20, 250, 99, 136, 89, 51, 207, 199, 249, 210, 155, 165, 233, 107, 229, 122, 40, 37, 203, 203 },
                            PasswordSalt = new byte[] { 25, 38, 34, 133, 34, 104, 95, 160, 62, 86, 41, 153, 39, 220, 7, 42, 135, 0, 245, 106, 115, 147, 64, 132, 40, 130, 97, 156, 139, 2, 137, 135, 210, 158, 23, 177, 212, 223, 106, 153, 123, 153, 246, 120, 49, 68, 215, 142, 213, 252, 0, 41, 7, 187, 186, 18, 26, 93, 100, 173, 33, 1, 212, 60 },
                            Status = true
                        },
                        new
                        {
                            Id = 10,
                            Email = "Remzi.Aydan60@yahoo.com",
                            FirstName = "Remzi",
                            LastName = "Aydan",
                            PasswordHash = new byte[] { 125, 248, 108, 240, 150, 13, 102, 91, 226, 28, 222, 181, 0, 126, 8, 106, 124, 25, 24, 225, 178, 23, 175, 114, 126, 236, 70, 62, 18, 60, 150, 190, 241, 215, 96, 82, 69, 150, 150, 117, 106, 111, 87, 246, 193, 65, 154, 156, 155, 208, 8, 173, 76, 173, 1, 202, 154, 104, 217, 126, 235, 113, 107, 146, 53, 91, 23, 212, 226, 165, 85, 16, 134, 83, 173, 152, 91, 160, 50, 252, 110, 59, 147, 182, 22, 200, 49, 40, 202, 64, 120, 117, 124, 129, 96, 229, 79, 109, 46, 84, 58, 117, 253, 151, 182, 97, 180, 168, 20, 250, 99, 136, 89, 51, 207, 199, 249, 210, 155, 165, 233, 107, 229, 122, 40, 37, 203, 203 },
                            PasswordSalt = new byte[] { 25, 38, 34, 133, 34, 104, 95, 160, 62, 86, 41, 153, 39, 220, 7, 42, 135, 0, 245, 106, 115, 147, 64, 132, 40, 130, 97, 156, 139, 2, 137, 135, 210, 158, 23, 177, 212, 223, 106, 153, 123, 153, 246, 120, 49, 68, 215, 142, 213, 252, 0, 41, 7, 187, 186, 18, 26, 93, 100, 173, 33, 1, 212, 60 },
                            Status = true
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Core.Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SocialMediaAccount", b =>
                {
                    b.HasOne("Domain.Entities.Developer", "Developer")
                        .WithMany("SocialMediaAccounts")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("Domain.Entities.Technology", b =>
                {
                    b.HasOne("Domain.Entities.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany("Technologies")
                        .HasForeignKey("ProgrammingLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgrammingLanguage");
                });

            modelBuilder.Entity("Core.Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Core.Domain.Entities.User", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.ProgrammingLanguage", b =>
                {
                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("Domain.Entities.Developer", b =>
                {
                    b.Navigation("SocialMediaAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
