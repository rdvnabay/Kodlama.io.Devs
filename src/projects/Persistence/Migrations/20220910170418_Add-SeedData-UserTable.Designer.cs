// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220910170418_Add-SeedData-UserTable")]
    partial class AddSeedDataUserTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("Core.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Dundar17@hotmail.com",
                            FirstName = "Dündar",
                            LastName = "Durmaz",
                            PasswordHash = new byte[] { 223, 17, 198, 228, 76, 24, 190, 142, 127, 162, 253, 9, 122, 190, 167, 92, 226, 150, 43, 137, 3, 243, 112, 112, 176, 97, 94, 235, 224, 240, 229, 83, 65, 13, 239, 227, 170, 209, 145, 181, 229, 98, 178, 35, 65, 241, 237, 15, 137, 254, 131, 86, 160, 114, 113, 63, 167, 179, 136, 252, 251, 42, 14, 250, 6, 9, 131, 205, 117, 74, 172, 37, 44, 33, 9, 175, 137, 100, 65, 217, 113, 105, 168, 106, 246, 27, 104, 5, 221, 208, 230, 131, 230, 154, 231, 234, 218, 108, 27, 170, 208, 187, 62, 72, 29, 18, 235, 73, 56, 214, 17, 170, 118, 199, 151, 101, 117, 72, 44, 179, 72, 255, 18, 162, 70, 227, 245, 138 },
                            PasswordSalt = new byte[] { 206, 204, 224, 231, 164, 145, 151, 241, 202, 97, 166, 176, 71, 188, 202, 88, 155, 17, 206, 80, 217, 83, 231, 104, 126, 40, 159, 17, 30, 178, 24, 203, 195, 190, 70, 145, 240, 14, 5, 65, 148, 52, 169, 45, 39, 17, 76, 202, 175, 111, 240, 123, 152, 142, 205, 74, 141, 44, 30, 71, 7, 187, 24, 209 },
                            Status = false
                        },
                        new
                        {
                            Id = 2,
                            Email = "Yalgin.Pekkan79@yahoo.com",
                            FirstName = "Yalgın",
                            LastName = "Pekkan",
                            PasswordHash = new byte[] { 223, 17, 198, 228, 76, 24, 190, 142, 127, 162, 253, 9, 122, 190, 167, 92, 226, 150, 43, 137, 3, 243, 112, 112, 176, 97, 94, 235, 224, 240, 229, 83, 65, 13, 239, 227, 170, 209, 145, 181, 229, 98, 178, 35, 65, 241, 237, 15, 137, 254, 131, 86, 160, 114, 113, 63, 167, 179, 136, 252, 251, 42, 14, 250, 6, 9, 131, 205, 117, 74, 172, 37, 44, 33, 9, 175, 137, 100, 65, 217, 113, 105, 168, 106, 246, 27, 104, 5, 221, 208, 230, 131, 230, 154, 231, 234, 218, 108, 27, 170, 208, 187, 62, 72, 29, 18, 235, 73, 56, 214, 17, 170, 118, 199, 151, 101, 117, 72, 44, 179, 72, 255, 18, 162, 70, 227, 245, 138 },
                            PasswordSalt = new byte[] { 206, 204, 224, 231, 164, 145, 151, 241, 202, 97, 166, 176, 71, 188, 202, 88, 155, 17, 206, 80, 217, 83, 231, 104, 126, 40, 159, 17, 30, 178, 24, 203, 195, 190, 70, 145, 240, 14, 5, 65, 148, 52, 169, 45, 39, 17, 76, 202, 175, 111, 240, 123, 152, 142, 205, 74, 141, 44, 30, 71, 7, 187, 24, 209 },
                            Status = false
                        },
                        new
                        {
                            Id = 3,
                            Email = "Mahmut.Topaloglu@gmail.com",
                            FirstName = "Mahmut",
                            LastName = "Topaloğlu",
                            PasswordHash = new byte[] { 223, 17, 198, 228, 76, 24, 190, 142, 127, 162, 253, 9, 122, 190, 167, 92, 226, 150, 43, 137, 3, 243, 112, 112, 176, 97, 94, 235, 224, 240, 229, 83, 65, 13, 239, 227, 170, 209, 145, 181, 229, 98, 178, 35, 65, 241, 237, 15, 137, 254, 131, 86, 160, 114, 113, 63, 167, 179, 136, 252, 251, 42, 14, 250, 6, 9, 131, 205, 117, 74, 172, 37, 44, 33, 9, 175, 137, 100, 65, 217, 113, 105, 168, 106, 246, 27, 104, 5, 221, 208, 230, 131, 230, 154, 231, 234, 218, 108, 27, 170, 208, 187, 62, 72, 29, 18, 235, 73, 56, 214, 17, 170, 118, 199, 151, 101, 117, 72, 44, 179, 72, 255, 18, 162, 70, 227, 245, 138 },
                            PasswordSalt = new byte[] { 206, 204, 224, 231, 164, 145, 151, 241, 202, 97, 166, 176, 71, 188, 202, 88, 155, 17, 206, 80, 217, 83, 231, 104, 126, 40, 159, 17, 30, 178, 24, 203, 195, 190, 70, 145, 240, 14, 5, 65, 148, 52, 169, 45, 39, 17, 76, 202, 175, 111, 240, 123, 152, 142, 205, 74, 141, 44, 30, 71, 7, 187, 24, 209 },
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            Email = "Gulen.Abaci66@yahoo.com",
                            FirstName = "Gülen",
                            LastName = "Abacı",
                            PasswordHash = new byte[] { 223, 17, 198, 228, 76, 24, 190, 142, 127, 162, 253, 9, 122, 190, 167, 92, 226, 150, 43, 137, 3, 243, 112, 112, 176, 97, 94, 235, 224, 240, 229, 83, 65, 13, 239, 227, 170, 209, 145, 181, 229, 98, 178, 35, 65, 241, 237, 15, 137, 254, 131, 86, 160, 114, 113, 63, 167, 179, 136, 252, 251, 42, 14, 250, 6, 9, 131, 205, 117, 74, 172, 37, 44, 33, 9, 175, 137, 100, 65, 217, 113, 105, 168, 106, 246, 27, 104, 5, 221, 208, 230, 131, 230, 154, 231, 234, 218, 108, 27, 170, 208, 187, 62, 72, 29, 18, 235, 73, 56, 214, 17, 170, 118, 199, 151, 101, 117, 72, 44, 179, 72, 255, 18, 162, 70, 227, 245, 138 },
                            PasswordSalt = new byte[] { 206, 204, 224, 231, 164, 145, 151, 241, 202, 97, 166, 176, 71, 188, 202, 88, 155, 17, 206, 80, 217, 83, 231, 104, 126, 40, 159, 17, 30, 178, 24, 203, 195, 190, 70, 145, 240, 14, 5, 65, 148, 52, 169, 45, 39, 17, 76, 202, 175, 111, 240, 123, 152, 142, 205, 74, 141, 44, 30, 71, 7, 187, 24, 209 },
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            Email = "Nalan_Abadan79@gmail.com",
                            FirstName = "Nalan",
                            LastName = "Abadan",
                            PasswordHash = new byte[] { 223, 17, 198, 228, 76, 24, 190, 142, 127, 162, 253, 9, 122, 190, 167, 92, 226, 150, 43, 137, 3, 243, 112, 112, 176, 97, 94, 235, 224, 240, 229, 83, 65, 13, 239, 227, 170, 209, 145, 181, 229, 98, 178, 35, 65, 241, 237, 15, 137, 254, 131, 86, 160, 114, 113, 63, 167, 179, 136, 252, 251, 42, 14, 250, 6, 9, 131, 205, 117, 74, 172, 37, 44, 33, 9, 175, 137, 100, 65, 217, 113, 105, 168, 106, 246, 27, 104, 5, 221, 208, 230, 131, 230, 154, 231, 234, 218, 108, 27, 170, 208, 187, 62, 72, 29, 18, 235, 73, 56, 214, 17, 170, 118, 199, 151, 101, 117, 72, 44, 179, 72, 255, 18, 162, 70, 227, 245, 138 },
                            PasswordSalt = new byte[] { 206, 204, 224, 231, 164, 145, 151, 241, 202, 97, 166, 176, 71, 188, 202, 88, 155, 17, 206, 80, 217, 83, 231, 104, 126, 40, 159, 17, 30, 178, 24, 203, 195, 190, 70, 145, 240, 14, 5, 65, 148, 52, 169, 45, 39, 17, 76, 202, 175, 111, 240, 123, 152, 142, 205, 74, 141, 44, 30, 71, 7, 187, 24, 209 },
                            Status = true
                        },
                        new
                        {
                            Id = 6,
                            Email = "Gokben94@hotmail.com",
                            FirstName = "Gökben",
                            LastName = "Velioğlu",
                            PasswordHash = new byte[] { 223, 17, 198, 228, 76, 24, 190, 142, 127, 162, 253, 9, 122, 190, 167, 92, 226, 150, 43, 137, 3, 243, 112, 112, 176, 97, 94, 235, 224, 240, 229, 83, 65, 13, 239, 227, 170, 209, 145, 181, 229, 98, 178, 35, 65, 241, 237, 15, 137, 254, 131, 86, 160, 114, 113, 63, 167, 179, 136, 252, 251, 42, 14, 250, 6, 9, 131, 205, 117, 74, 172, 37, 44, 33, 9, 175, 137, 100, 65, 217, 113, 105, 168, 106, 246, 27, 104, 5, 221, 208, 230, 131, 230, 154, 231, 234, 218, 108, 27, 170, 208, 187, 62, 72, 29, 18, 235, 73, 56, 214, 17, 170, 118, 199, 151, 101, 117, 72, 44, 179, 72, 255, 18, 162, 70, 227, 245, 138 },
                            PasswordSalt = new byte[] { 206, 204, 224, 231, 164, 145, 151, 241, 202, 97, 166, 176, 71, 188, 202, 88, 155, 17, 206, 80, 217, 83, 231, 104, 126, 40, 159, 17, 30, 178, 24, 203, 195, 190, 70, 145, 240, 14, 5, 65, 148, 52, 169, 45, 39, 17, 76, 202, 175, 111, 240, 123, 152, 142, 205, 74, 141, 44, 30, 71, 7, 187, 24, 209 },
                            Status = true
                        },
                        new
                        {
                            Id = 7,
                            Email = "Nevzat_Akgul@yahoo.com",
                            FirstName = "Nevzat",
                            LastName = "Akgül",
                            PasswordHash = new byte[] { 223, 17, 198, 228, 76, 24, 190, 142, 127, 162, 253, 9, 122, 190, 167, 92, 226, 150, 43, 137, 3, 243, 112, 112, 176, 97, 94, 235, 224, 240, 229, 83, 65, 13, 239, 227, 170, 209, 145, 181, 229, 98, 178, 35, 65, 241, 237, 15, 137, 254, 131, 86, 160, 114, 113, 63, 167, 179, 136, 252, 251, 42, 14, 250, 6, 9, 131, 205, 117, 74, 172, 37, 44, 33, 9, 175, 137, 100, 65, 217, 113, 105, 168, 106, 246, 27, 104, 5, 221, 208, 230, 131, 230, 154, 231, 234, 218, 108, 27, 170, 208, 187, 62, 72, 29, 18, 235, 73, 56, 214, 17, 170, 118, 199, 151, 101, 117, 72, 44, 179, 72, 255, 18, 162, 70, 227, 245, 138 },
                            PasswordSalt = new byte[] { 206, 204, 224, 231, 164, 145, 151, 241, 202, 97, 166, 176, 71, 188, 202, 88, 155, 17, 206, 80, 217, 83, 231, 104, 126, 40, 159, 17, 30, 178, 24, 203, 195, 190, 70, 145, 240, 14, 5, 65, 148, 52, 169, 45, 39, 17, 76, 202, 175, 111, 240, 123, 152, 142, 205, 74, 141, 44, 30, 71, 7, 187, 24, 209 },
                            Status = false
                        },
                        new
                        {
                            Id = 8,
                            Email = "Elmas65@yahoo.com",
                            FirstName = "Elmas",
                            LastName = "Tuğluk",
                            PasswordHash = new byte[] { 223, 17, 198, 228, 76, 24, 190, 142, 127, 162, 253, 9, 122, 190, 167, 92, 226, 150, 43, 137, 3, 243, 112, 112, 176, 97, 94, 235, 224, 240, 229, 83, 65, 13, 239, 227, 170, 209, 145, 181, 229, 98, 178, 35, 65, 241, 237, 15, 137, 254, 131, 86, 160, 114, 113, 63, 167, 179, 136, 252, 251, 42, 14, 250, 6, 9, 131, 205, 117, 74, 172, 37, 44, 33, 9, 175, 137, 100, 65, 217, 113, 105, 168, 106, 246, 27, 104, 5, 221, 208, 230, 131, 230, 154, 231, 234, 218, 108, 27, 170, 208, 187, 62, 72, 29, 18, 235, 73, 56, 214, 17, 170, 118, 199, 151, 101, 117, 72, 44, 179, 72, 255, 18, 162, 70, 227, 245, 138 },
                            PasswordSalt = new byte[] { 206, 204, 224, 231, 164, 145, 151, 241, 202, 97, 166, 176, 71, 188, 202, 88, 155, 17, 206, 80, 217, 83, 231, 104, 126, 40, 159, 17, 30, 178, 24, 203, 195, 190, 70, 145, 240, 14, 5, 65, 148, 52, 169, 45, 39, 17, 76, 202, 175, 111, 240, 123, 152, 142, 205, 74, 141, 44, 30, 71, 7, 187, 24, 209 },
                            Status = true
                        },
                        new
                        {
                            Id = 9,
                            Email = "Hasmet30@hotmail.com",
                            FirstName = "Haşmet",
                            LastName = "Koçoğlu",
                            PasswordHash = new byte[] { 223, 17, 198, 228, 76, 24, 190, 142, 127, 162, 253, 9, 122, 190, 167, 92, 226, 150, 43, 137, 3, 243, 112, 112, 176, 97, 94, 235, 224, 240, 229, 83, 65, 13, 239, 227, 170, 209, 145, 181, 229, 98, 178, 35, 65, 241, 237, 15, 137, 254, 131, 86, 160, 114, 113, 63, 167, 179, 136, 252, 251, 42, 14, 250, 6, 9, 131, 205, 117, 74, 172, 37, 44, 33, 9, 175, 137, 100, 65, 217, 113, 105, 168, 106, 246, 27, 104, 5, 221, 208, 230, 131, 230, 154, 231, 234, 218, 108, 27, 170, 208, 187, 62, 72, 29, 18, 235, 73, 56, 214, 17, 170, 118, 199, 151, 101, 117, 72, 44, 179, 72, 255, 18, 162, 70, 227, 245, 138 },
                            PasswordSalt = new byte[] { 206, 204, 224, 231, 164, 145, 151, 241, 202, 97, 166, 176, 71, 188, 202, 88, 155, 17, 206, 80, 217, 83, 231, 104, 126, 40, 159, 17, 30, 178, 24, 203, 195, 190, 70, 145, 240, 14, 5, 65, 148, 52, 169, 45, 39, 17, 76, 202, 175, 111, 240, 123, 152, 142, 205, 74, 141, 44, 30, 71, 7, 187, 24, 209 },
                            Status = false
                        },
                        new
                        {
                            Id = 10,
                            Email = "Yalcin82@yahoo.com",
                            FirstName = "Yalçın",
                            LastName = "Keçeci",
                            PasswordHash = new byte[] { 223, 17, 198, 228, 76, 24, 190, 142, 127, 162, 253, 9, 122, 190, 167, 92, 226, 150, 43, 137, 3, 243, 112, 112, 176, 97, 94, 235, 224, 240, 229, 83, 65, 13, 239, 227, 170, 209, 145, 181, 229, 98, 178, 35, 65, 241, 237, 15, 137, 254, 131, 86, 160, 114, 113, 63, 167, 179, 136, 252, 251, 42, 14, 250, 6, 9, 131, 205, 117, 74, 172, 37, 44, 33, 9, 175, 137, 100, 65, 217, 113, 105, 168, 106, 246, 27, 104, 5, 221, 208, 230, 131, 230, 154, 231, 234, 218, 108, 27, 170, 208, 187, 62, 72, 29, 18, 235, 73, 56, 214, 17, 170, 118, 199, 151, 101, 117, 72, 44, 179, 72, 255, 18, 162, 70, 227, 245, 138 },
                            PasswordSalt = new byte[] { 206, 204, 224, 231, 164, 145, 151, 241, 202, 97, 166, 176, 71, 188, 202, 88, 155, 17, 206, 80, 217, 83, 231, 104, 126, 40, 159, 17, 30, 178, 24, 203, 195, 190, 70, 145, 240, 14, 5, 65, 148, 52, 169, 45, 39, 17, 76, 202, 175, 111, 240, 123, 152, 142, 205, 74, 141, 44, 30, 71, 7, 187, 24, 209 },
                            Status = false
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "OperationClaimId");

                    b.HasIndex("OperationClaimId");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.ProgrammingLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProgrammingLanguages");
                });

            modelBuilder.Entity("Domain.Entities.SocialMediaAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DeveloperId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("UserId");

                    b.ToTable("SocialMediaAccounts");
                });

            modelBuilder.Entity("Domain.Entities.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgrammingLanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammingLanguageId");

                    b.ToTable("Technologies");
                });

            modelBuilder.Entity("Domain.Entities.Developer", b =>
                {
                    b.HasBaseType("Core.Domain.Entities.User");

                    b.HasDiscriminator().HasValue("Developer");
                });

            modelBuilder.Entity("Core.Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Core.Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SocialMediaAccount", b =>
                {
                    b.HasOne("Domain.Entities.Developer", null)
                        .WithMany("SocialMediaAccounts")
                        .HasForeignKey("DeveloperId");

                    b.HasOne("Core.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Technology", b =>
                {
                    b.HasOne("Domain.Entities.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany("Technologies")
                        .HasForeignKey("ProgrammingLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgrammingLanguage");
                });

            modelBuilder.Entity("Core.Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Core.Domain.Entities.User", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.ProgrammingLanguage", b =>
                {
                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("Domain.Entities.Developer", b =>
                {
                    b.Navigation("SocialMediaAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
